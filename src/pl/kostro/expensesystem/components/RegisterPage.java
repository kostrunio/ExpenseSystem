package pl.kostro.expensesystem.components;

import pl.kostro.expensesystem.db.AdapterDB;
import pl.kostro.expensesystem.model.RealUser;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;

public class RegisterPage extends CustomComponent {

	private static final long serialVersionUID = 6185954337600080624L;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout userDataGrid;
	@AutoGenerated
	private Label userNameLabel;
	@AutoGenerated
	private TextField userName;
	@AutoGenerated
	private Label passwordLabel;
	@AutoGenerated
	private TextField password;
	@AutoGenerated
	private Label confirmPasswordLabel;
	@AutoGenerated
	private TextField confirmedPassword;
	@AutoGenerated
	private Label emailLabel;
	@AutoGenerated
	private TextField email;
	@AutoGenerated
	private Button saveButton;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public RegisterPage() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		saveButton.addClickListener(new Button.ClickListener() {
			
			private static final long serialVersionUID = -2774115424957860016L;

			@Override
			public void buttonClick(ClickEvent event) {
			  if (password.getValue().equals(confirmedPassword.getValue())) {
  			  RealUser loggedUser = new RealUser();
  			  loggedUser.setName(userName.getValue());
  			  loggedUser.setPassword(password.getValue());
  			  loggedUser.setEmail(email.getValue());
  			  AdapterDB.createUser(loggedUser);
  				setCompositionRoot(new LoginPage());
			  } else
			    new Notification("B³êdne has³o", "Podane has³a do siebie nie pasuj¹", Notification.Type.ERROR_MESSAGE);
			}
		});
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// userDataGrid
		userDataGrid = buildUserDataGrid();
		mainLayout.addComponent(userDataGrid);
		
		// saveButton
		saveButton = new Button();
		saveButton.setCaption("Zapisz");
		saveButton.setImmediate(true);
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		mainLayout.addComponent(saveButton);
		
		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildUserDataGrid() {
		// common part: create layout
		userDataGrid = new GridLayout();
		userDataGrid.setCaption("Rejestracja");
		userDataGrid.setImmediate(false);
		userDataGrid.setWidth("-1px");
		userDataGrid.setHeight("-1px");
		userDataGrid.setMargin(true);
		userDataGrid.setColumns(2);
		userDataGrid.setRows(5);
		
		// userNameLabel
		userNameLabel = new Label();
		userNameLabel.setImmediate(false);
		userNameLabel.setWidth("-1px");
		userNameLabel.setHeight("-1px");
		userNameLabel.setValue("nazwa u¿ytkownika");
		userDataGrid.addComponent(userNameLabel, 0, 0);
		
		// userName
		userName = new TextField();
		userName.setImmediate(false);
		userName.setWidth("-1px");
		userName.setHeight("-1px");
		userDataGrid.addComponent(userName, 1, 0);
		
		// passwordLabel
		passwordLabel = new Label();
		passwordLabel.setImmediate(false);
		passwordLabel.setWidth("-1px");
		passwordLabel.setHeight("-1px");
		passwordLabel.setValue("has³o");
		userDataGrid.addComponent(passwordLabel, 0, 1);
		
		// password
		password = new TextField();
		password.setImmediate(false);
		password.setWidth("-1px");
		password.setHeight("-1px");
		userDataGrid.addComponent(password, 1, 1);
		
		// confirmPasswordLabel
		confirmPasswordLabel = new Label();
		confirmPasswordLabel.setImmediate(false);
		confirmPasswordLabel.setWidth("-1px");
		confirmPasswordLabel.setHeight("-1px");
		confirmPasswordLabel.setValue("powtórz has³o");
		userDataGrid.addComponent(confirmPasswordLabel, 0, 2);
		
		// confirmedPassword
		confirmedPassword = new TextField();
		confirmedPassword.setImmediate(false);
		confirmedPassword.setWidth("-1px");
		confirmedPassword.setHeight("-1px");
		userDataGrid.addComponent(confirmedPassword, 1, 2);
		
		// emailLabel
		emailLabel = new Label();
		emailLabel.setImmediate(false);
		emailLabel.setWidth("-1px");
		emailLabel.setHeight("-1px");
		emailLabel.setValue("adres e-mail");
		userDataGrid.addComponent(emailLabel, 0, 3);
		
		// email
		email = new TextField();
		email.setImmediate(false);
		email.setWidth("-1px");
		email.setHeight("-1px");
		userDataGrid.addComponent(email, 1, 3);
		
		return userDataGrid;
	}

}
