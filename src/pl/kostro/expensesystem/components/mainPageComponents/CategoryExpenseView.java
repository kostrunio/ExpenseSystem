package pl.kostro.expensesystem.components.mainPageComponents;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import pl.kostro.expensesystem.components.dialog.ConfirmDialog;
import pl.kostro.expensesystem.model.Category;
import pl.kostro.expensesystem.model.Expense;
import pl.kostro.expensesystem.model.ExpenseSheet;
import pl.kostro.expensesystem.model.service.ExpenseService;
import pl.kostro.expensesystem.utils.CategoryExpense;
import pl.kostro.expensesystem.utils.DateExpense;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Reindeer;

public class CategoryExpenseView extends CustomComponent {

	@AutoGenerated
  private VerticalLayout mainLayout;

  @AutoGenerated
  private HorizontalLayout buttonLayout;

  @AutoGenerated
  private Button addRowButton;

  @AutoGenerated
  private Button backButton;

  @AutoGenerated
  private HorizontalLayout expenseLayout;

  @AutoGenerated
  private GridLayout expenseGrid;

  private static final long serialVersionUID = -2865120003019786780L;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private ExpenseSheet expenseSheet;
	private Date date;
	private Category category;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @param parentView 
	 * @param date 
	 * @param expenseSheet 
	 * @param category 
	 */
	public CategoryExpenseView(final ExpenseSheet expenseSheet, final Date date, final Category category) {
		this.expenseSheet = expenseSheet;
		this.date = date;
		this.category = category;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		addRowButton.setClickShortcut(KeyCode.ENTER);
		addRowButton.addStyleName(Reindeer.BUTTON_DEFAULT);
		addRowButton.addClickListener(new Button.ClickListener() {
			
			private static final long serialVersionUID = -257222427520041964L;

			@Override
			public void buttonClick(ClickEvent event) {
				Expense expense = new Expense(date, "", category, null, "");
				setCompositionRoot(new AddNewExpense(expenseSheet, expense, false));
			}
		});
		
		prepareExpenseGrid();
		
		backButton.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = -8299221859613396996L;

			@Override
			public void buttonClick(ClickEvent event) {
					setCompositionRoot(new DayView(expenseSheet, date));
			}
			
		});
	}

	private void prepareExpenseGrid() {
	  final ExpenseService expenseService = new ExpenseService();
	  expenseGrid.removeAllComponents();
	  
		List<Expense> expenseList;
		DateExpense dateExpenseMap = expenseSheet.getDateExpenseMap().get(date);
		if (dateExpenseMap == null
				|| dateExpenseMap.getCategoryExpenseMap().get(category) == null)
			expenseList = new ArrayList<Expense>();
		else {
			CategoryExpense categoryExpenseMap = dateExpenseMap.getCategoryExpenseMap().get(category);
			expenseList = categoryExpenseMap.getExpenseList();
		}
		expenseGrid.setColumns(4);
		expenseGrid.setRows(expenseList.size()==0 ? 1 : expenseList.size());
		
		for (int i = 0; i < expenseList.size(); i++) {
			Expense expense = expenseList.get(i);
			TextField user = new TextField();
			user.setEnabled(false);
			user.setValue(expense.getUser().getName());
			expenseGrid.addComponent(user, 0, i);
			
			Button valueButton = new Button(expenseService.getValueString(expense));
			valueButton.setImmediate(true);
			valueButton.setWidth("-1px");
			valueButton.setHeight("-1px");
			valueButton.setData(expense);
			expenseGrid.addComponent(valueButton, 1, i);
			
			valueButton.addClickListener(new Button.ClickListener() {
				
				private static final long serialVersionUID = -257222427520041964L;

				@Override
				public void buttonClick(ClickEvent event) {
					if (event.getButton().getData() instanceof Expense) {
						Expense expense = (Expense) event.getButton().getData();
						setCompositionRoot(new AddNewExpense(expenseSheet, expense, true));
					}
				}
			});
			
			TextField comment = new TextField();
			comment.setEnabled(false);
			comment.setValue(expense.getComment());
			expenseGrid.addComponent(comment, 2, i);
			
			Button removeButton = new Button();
			removeButton.setCaption("X");
			removeButton.setImmediate(true);
			removeButton.setWidth("-1px");
			removeButton.setHeight("-1px");
			removeButton.setData(expense);
			expenseGrid.addComponent(removeButton, 3, i);
			
			removeButton.addClickListener(new Button.ClickListener() {
				
				private static final long serialVersionUID = 5225631354128582156L;

				@Override
				public void buttonClick(ClickEvent event) {
					if (event.getButton().getData() instanceof Expense) {
						final Expense expense = (Expense) event.getButton().getData();
						ConfirmDialog.show(getUI(),
	              "Usuniêcie wiersza",
	              "Czy na pewno chcesz usun¹æ wiersz?",
	              "Tak, wiem co robiê",
	              "Nie", new ConfirmDialog.Listener() {
	                
	                private static final long serialVersionUID = 3844318339125611876L;

	                @Override
	                public void onClose(ConfirmDialog dialog) {
	                  if (dialog.isConfirmed()) {
	                    expenseService.removeExpense(expenseSheet, expense);
	                    prepareExpenseGrid();
	                  }
	                }
	              });
					}
				}
			});
		}
	}

	@AutoGenerated
  private VerticalLayout buildMainLayout() {
    // common part: create layout
    mainLayout = new VerticalLayout();
    mainLayout.setImmediate(false);
    mainLayout.setWidth("100%");
    mainLayout.setHeight("100%");
    mainLayout.setMargin(true);
    mainLayout.setSpacing(true);
    
    // top-level component properties
    setWidth("100.0%");
    setHeight("100.0%");
    
    // expenseLayout
    expenseLayout = buildExpenseLayout();
    mainLayout.addComponent(expenseLayout);
    
    // buttonLayout
    buttonLayout = buildButtonLayout();
    mainLayout.addComponent(buttonLayout);
    
    return mainLayout;
  }

  @AutoGenerated
  private HorizontalLayout buildExpenseLayout() {
    // common part: create layout
    expenseLayout = new HorizontalLayout();
    expenseLayout.setImmediate(false);
    expenseLayout.setWidth("-1px");
    expenseLayout.setHeight("-1px");
    expenseLayout.setMargin(false);
    
    // expenseGrid
    expenseGrid = new GridLayout();
    expenseGrid.setImmediate(false);
    expenseGrid.setWidth("-1px");
    expenseGrid.setHeight("-1px");
    expenseGrid.setMargin(false);
    expenseGrid.setSpacing(true);
    expenseLayout.addComponent(expenseGrid);
    
    return expenseLayout;
  }

  @AutoGenerated
  private HorizontalLayout buildButtonLayout() {
    // common part: create layout
    buttonLayout = new HorizontalLayout();
    buttonLayout.setImmediate(false);
    buttonLayout.setWidth("-1px");
    buttonLayout.setHeight("-1px");
    buttonLayout.setMargin(false);
    buttonLayout.setSpacing(true);
    
    // backButton
    backButton = new Button();
    backButton.setCaption("Powrót");
    backButton.setImmediate(true);
    backButton.setWidth("-1px");
    backButton.setHeight("-1px");
    buttonLayout.addComponent(backButton);
    
    // addRowButton
    addRowButton = new Button();
    addRowButton.setCaption("Dodaj wiersz");
    addRowButton.setImmediate(true);
    addRowButton.setWidth("-1px");
    addRowButton.setHeight("-1px");
    buttonLayout.addComponent(addRowButton);
    
    return buttonLayout;
  }

}
