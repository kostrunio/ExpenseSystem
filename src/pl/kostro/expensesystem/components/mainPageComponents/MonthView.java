package pl.kostro.expensesystem.components.mainPageComponents;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import pl.kostro.expensesystem.model.ExpenseSheet;
import pl.kostro.expensesystem.service.ExpenseSheetService;
import pl.kostro.expensesystem.utils.Converter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Calendar;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.components.calendar.CalendarComponentEvents.DateClickEvent;
import com.vaadin.ui.components.calendar.CalendarComponentEvents.WeekClick;
import com.vaadin.ui.components.calendar.event.CalendarEvent;
import com.vaadin.ui.components.calendar.event.CalendarEventProvider;
import com.vaadin.ui.components.calendar.handler.BasicDateClickHandler;
import com.vaadin.ui.components.calendar.handler.BasicWeekClickHandler;

public class MonthView extends CustomComponent {

	@AutoGenerated
  private VerticalLayout mainLayout;

  @AutoGenerated
  private Calendar monthCalendar;

  @AutoGenerated
  private HorizontalLayout navigationLayout;

  @AutoGenerated
  private Button nextMonthButton;

  @AutoGenerated
  private Button thisMonthButton;

  @AutoGenerated
  private Button previousMonthButton;

  private static final long serialVersionUID = 2594978831652398190L;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public MonthView(final ExpenseSheet expenseSheet, final java.util.Calendar calendar) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		previousMonthButton.addClickListener(new Button.ClickListener() {
      
      private static final long serialVersionUID = -8048895457148394023L;

      @Override
      public void buttonClick(ClickEvent event) {
        calendar.add(java.util.Calendar.MONTH, -1);
        thisMonthButton.setCaption(new SimpleDateFormat("MMMM yyyy").format(calendar.getTime()));
        showCalendar(expenseSheet, calendar);
      }
    });
		
		thisMonthButton.setCaption(new SimpleDateFormat("MMMM yyyy").format(calendar.getTime()));
		thisMonthButton.addClickListener(new Button.ClickListener() {
      
      private static final long serialVersionUID = -8048895457148394023L;

      @Override
      public void buttonClick(ClickEvent event) {
        showCalendar(expenseSheet, calendar);
      }
    });
		
		nextMonthButton.addClickListener(new Button.ClickListener() {
      
      private static final long serialVersionUID = -8048895457148394023L;

      @Override
      public void buttonClick(ClickEvent event) {
        calendar.add(java.util.Calendar.MONTH, 1);
        thisMonthButton.setCaption(new SimpleDateFormat("MMMM yyyy").format(calendar.getTime()));
        showCalendar(expenseSheet, calendar);
      }
    });
		
		monthCalendar.setEventProvider(new CalendarEventProvider() {

			private static final long serialVersionUID = -2219052651460350955L;

			@Override
			public List<CalendarEvent> getEvents(Date startDate, Date endDate) {
				return Converter.transformExpensesToEvents(ExpenseSheetService.prepareDateExpenseMap(expenseSheet, startDate, endDate));
			}
			
		});
		
		monthCalendar.setHandler(new BasicDateClickHandler() {
			
			private static final long serialVersionUID = 2426375506359469533L;

			@Override
			public void dateClick(DateClickEvent event) {
			  calendar.setTime(event.getDate());
				setCompositionRoot(new DayView(expenseSheet, calendar));
			}
		});
		
		monthCalendar.setHandler(new BasicWeekClickHandler() {
			
			private static final long serialVersionUID = -5488623945839839169L;

			@Override
			protected void setDates(WeekClick event, Date start, Date end) {
				//Do nothing
			}
		});
		showCalendar(expenseSheet, calendar);
	}

	public void showCalendar(ExpenseSheet expenseSheet, java.util.Calendar date) {
	  java.util.Calendar calendar = GregorianCalendar.getInstance();
	  calendar.setTime(date.getTime());
	  monthCalendar.setStartDate(calendar.getTime());
	  calendar.add(java.util.Calendar.MONTH, 1);
	  calendar.add(java.util.Calendar.DAY_OF_MONTH, -1);
	  monthCalendar.setEndDate(calendar.getTime());
	}

	@AutoGenerated
  private VerticalLayout buildMainLayout() {
    // common part: create layout
    mainLayout = new VerticalLayout();
    mainLayout.setImmediate(false);
    mainLayout.setWidth("100%");
    mainLayout.setHeight("100%");
    mainLayout.setMargin(false);
    
    // top-level component properties
    setWidth("100.0%");
    setHeight("100.0%");
    
    // navigationLayout
    navigationLayout = buildNavigationLayout();
    mainLayout.addComponent(navigationLayout);
    mainLayout.setComponentAlignment(navigationLayout, new Alignment(20));
    
    // monthCalendar
    monthCalendar = new Calendar();
    monthCalendar.setImmediate(false);
    monthCalendar.setWidth("-1px");
    monthCalendar.setHeight("-1px");
    mainLayout.addComponent(monthCalendar);
    
    return mainLayout;
  }

  @AutoGenerated
  private HorizontalLayout buildNavigationLayout() {
    // common part: create layout
    navigationLayout = new HorizontalLayout();
    navigationLayout.setImmediate(false);
    navigationLayout.setWidth("100.0%");
    navigationLayout.setHeight("-1px");
    navigationLayout.setMargin(false);
    
    // previousMonthButton
    previousMonthButton = new Button();
    previousMonthButton.setCaption("<");
    previousMonthButton.setImmediate(true);
    previousMonthButton.setWidth("-1px");
    previousMonthButton.setHeight("-1px");
    navigationLayout.addComponent(previousMonthButton);
    navigationLayout.setComponentAlignment(previousMonthButton, new Alignment(33));
    
    // thisMonthButton
    thisMonthButton = new Button();
    thisMonthButton.setCaption("Button");
    thisMonthButton.setImmediate(true);
    thisMonthButton.setWidth("-1px");
    thisMonthButton.setHeight("-1px");
    navigationLayout.addComponent(thisMonthButton);
    navigationLayout.setComponentAlignment(thisMonthButton, new Alignment(48));
    
    // nextMonthButton
    nextMonthButton = new Button();
    nextMonthButton.setCaption(">");
    nextMonthButton.setImmediate(true);
    nextMonthButton.setWidth("-1px");
    nextMonthButton.setHeight("-1px");
    navigationLayout.addComponent(nextMonthButton);
    navigationLayout.setComponentAlignment(nextMonthButton, new Alignment(34));
    
    return navigationLayout;
  }

}
