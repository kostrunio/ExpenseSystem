package pl.kostro.expensesystem.views.settingsPage;

import java.math.BigDecimal;

import pl.kostro.expensesystem.components.dialog.ConfirmDialog;
import pl.kostro.expensesystem.model.Category;
import pl.kostro.expensesystem.model.ExpenseSheet;
import pl.kostro.expensesystem.model.RealUser;
import pl.kostro.expensesystem.model.User;
import pl.kostro.expensesystem.model.UserLimit;
import pl.kostro.expensesystem.service.ExpenseSheetService;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Grid;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;

public class ExpenseSheetSettingsView extends CustomComponent implements View {

  @AutoGenerated
  private VerticalLayout mainLayout;

  @AutoGenerated
  private HorizontalLayout gridLayout;
  
  @AutoGenerated
  private HorizontalLayout buttonLayout;

  @AutoGenerated
  private Button delSheetButton;

  @AutoGenerated
  private Button addSheetButton;

  @AutoGenerated
  private Panel userPanel;

  @AutoGenerated
  private VerticalLayout userLayout;

  @AutoGenerated
  private HorizontalLayout userButtonLayout;

  @AutoGenerated
  private Button deleteUserButton;

  @AutoGenerated
  private Button addUserButton;

  @AutoGenerated
  private Grid userGrid;

  @AutoGenerated
  private Panel realUserPanel;

  @AutoGenerated
  private VerticalLayout realUserLayout;

  @AutoGenerated
  private HorizontalLayout realUserButtonLayout;

  @AutoGenerated
  private Button deleteRealUserButton;

  @AutoGenerated
  private Button addRealUserButton;

  @AutoGenerated
  private Grid realUserGrid;

  @AutoGenerated
  private Panel categoryPanel;

  @AutoGenerated
  private VerticalLayout categoryLayout;

  @AutoGenerated
  private HorizontalLayout categoryButtonLayout;

  @AutoGenerated
  private Button deleteCategoryButton;

  @AutoGenerated
  private Button moveDownCategoryButton;

  @AutoGenerated
  private Button moveUpCategoryButton;

  @AutoGenerated
  private Button addCategoryButton;

  @AutoGenerated
  private Grid categoryGrid;

  private static final long serialVersionUID = -4661152658922847492L;

  /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

  private ExpenseSheet expenseSheet;

  /**
   * The constructor should first build the main layout, set the composition
   * root and then do any custom initialization.
   * 
   * The constructor will not be automatically regenerated by the visual editor.
   * 
   * @param expenseSheet
   */
  public ExpenseSheetSettingsView() {
  }

  private void prepareView() {

    buildMainLayout();
    setCompositionRoot(mainLayout);

    // TODO add user code here
    addSheetButton.addClickListener(new Button.ClickListener() {
      private static final long serialVersionUID = 8671045294811634046L;

      @Override
      public void buttonClick(ClickEvent event) {
        showNewSheetWindow();
      }
    });
    
    delSheetButton.addClickListener(new Button.ClickListener() {
      private static final long serialVersionUID = 8619201598088375093L;

      @Override
      public void buttonClick(ClickEvent event) {
        ConfirmDialog.show(getUI(), "Usuniêcie arkusza", "Czy na pewno chcesz usun¹æ caly arkusz: " + expenseSheet.getName() + "\n i wszystkie jego wydatki?", "Tak, wiem co robiê", "Nie", new ConfirmDialog.Listener() {

          private static final long serialVersionUID = 3844318339125611876L;

          @Override
          public void onClose(ConfirmDialog dialog) {
            if (dialog.isConfirmed()) {
              ExpenseSheetService.removeExpenseSheet(expenseSheet);
            }
          }
        });        
      }
    });
    
    prepareCategoryGrid();
    prepareRealUserGrid();
    prepareUserGrid();
    if (expenseSheet != null) {
      filCategoryGrid();
      filUsersGirds();
    } else {
      showNewSheetWindow();
    }
  }
  
  private void prepareCategoryGrid() {
    categoryGrid.addColumn("nazwa", Category.class);
  }
  
  private void prepareRealUserGrid() {
    realUserGrid.addColumn("nazwa", RealUser.class);
    realUserGrid.addColumn("limit", BigDecimal.class);
    realUserGrid.addColumn("l.p.", Integer.class);
  }
  
  private void prepareUserGrid() {
    userGrid.addColumn("nazwa", User.class);
    userGrid.addColumn("limit", BigDecimal.class);
    userGrid.addColumn("l.p.", Integer.class);
  }
  
  private void filCategoryGrid() {
    categoryGrid.getContainerDataSource().removeAllItems();
    for (Category category : expenseSheet.getCategoryList()) {
      categoryGrid.addRow(category);
    }
    categoryGrid.recalculateColumnWidths();
  }
  
  private void filUsersGirds() {
    realUserGrid.getContainerDataSource().removeAllItems();
    userGrid.getContainerDataSource().removeAllItems();
    for (UserLimit userLimit : expenseSheet.getUserLimitList()) {
      if (userLimit.getUser() instanceof RealUser)
        realUserGrid.addRow(userLimit.getUser(), userLimit.getLimit(), userLimit.getOrder());
      else
        userGrid.addRow(userLimit.getUser(), userLimit.getLimit(), userLimit.getOrder());
    }
    realUserGrid.recalculateColumnWidths();
    userGrid.recalculateColumnWidths();
  }
  
  private void showNewSheetWindow() {
    UI.getCurrent().addWindow(new AddNewSheetWindow());
  }

  @Override
  public void enter(ViewChangeEvent event) {
    if (event.getParameters() != null) {
      String expenseSheetName = event.getParameters().split("/")[0];
      RealUser loggedUser = (RealUser) VaadinSession.getCurrent().getAttribute(RealUser.class.getName());
      expenseSheet = ExpenseSheetService.getExpenseSheet(loggedUser, expenseSheetName);
      prepareView();
    }
  }

  @AutoGenerated
  private VerticalLayout buildMainLayout() {
    // common part: create layout
    mainLayout = new VerticalLayout();
    mainLayout.setImmediate(false);
    mainLayout.setWidth("100%");
    mainLayout.setHeight("-1px");
    mainLayout.setMargin(true);
    
    gridLayout = new HorizontalLayout();
    gridLayout.setImmediate(false);
    gridLayout.setWidth("100%");
    gridLayout.setHeight("80%");
    gridLayout.setSpacing(true);
    mainLayout.addComponent(gridLayout);
    
    // top-level component properties
    setWidth("100.0%");
    setHeight("100.0%");
    
    // categoryPanel
    categoryPanel = buildCategoryPanel();
    gridLayout.addComponent(categoryPanel);
    
    // realUserPanel
    realUserPanel = buildRealUserPanel();
    gridLayout.addComponent(realUserPanel);
    
    // userPanel
    userPanel = buildUserPanel();
    gridLayout.addComponent(userPanel);
    
    // buttonLayout
    buttonLayout = buildButtonLayout();
    mainLayout.addComponent(buttonLayout);
    
    return mainLayout;
  }

  @AutoGenerated
  private Panel buildCategoryPanel() {
    // common part: create layout
    categoryPanel = new Panel();
    categoryPanel.setCaption("Kategorie");
    categoryPanel.setImmediate(false);
    categoryPanel.setWidth("100.0%");
    categoryPanel.setHeight("-1px");
    
    // categoryLayout
    categoryLayout = buildCategoryLayout();
    categoryPanel.setContent(categoryLayout);
    
    return categoryPanel;
  }

  @AutoGenerated
  private VerticalLayout buildCategoryLayout() {
    // common part: create layout
    categoryLayout = new VerticalLayout();
    categoryLayout.setImmediate(false);
    categoryLayout.setWidth("100.0%");
    categoryLayout.setHeight("-1px");
    categoryLayout.setMargin(true);
    
    // categoryGrid
    categoryGrid = new Grid();
    categoryGrid.setImmediate(false);
    categoryGrid.setWidth("100%");
    categoryGrid.setHeight("100%");
    categoryLayout.addComponent(categoryGrid);
    
    // categoryButtonLayout
    categoryButtonLayout = buildCategoryButtonLayout();
    categoryLayout.addComponent(categoryButtonLayout);
    
    return categoryLayout;
  }

  @AutoGenerated
  private HorizontalLayout buildCategoryButtonLayout() {
    // common part: create layout
    categoryButtonLayout = new HorizontalLayout();
    categoryButtonLayout.setImmediate(false);
    categoryButtonLayout.setWidth("-1px");
    categoryButtonLayout.setHeight("-1px");
    categoryButtonLayout.setMargin(true);
    categoryButtonLayout.setSpacing(true);
    
    // addCategoryButton
    addCategoryButton = new Button();
    addCategoryButton.setIcon(FontAwesome.PLUS_SQUARE);
    addCategoryButton.setImmediate(true);
    addCategoryButton.setWidth("-1px");
    addCategoryButton.setHeight("-1px");
    categoryButtonLayout.addComponent(addCategoryButton);
    
    // moveUpCategoryButton
    moveUpCategoryButton = new Button();
    moveUpCategoryButton.setIcon(FontAwesome.ANGLE_UP);
    moveUpCategoryButton.setImmediate(true);
    moveUpCategoryButton.setWidth("-1px");
    moveUpCategoryButton.setHeight("-1px");
    categoryButtonLayout.addComponent(moveUpCategoryButton);
    
    // moveDownCategoryButton
    moveDownCategoryButton = new Button();
    moveDownCategoryButton.setIcon(FontAwesome.ANGLE_DOWN);
    moveDownCategoryButton.setImmediate(true);
    moveDownCategoryButton.setWidth("-1px");
    moveDownCategoryButton.setHeight("-1px");
    categoryButtonLayout.addComponent(moveDownCategoryButton);
    
    // deleteCategoryButton
    deleteCategoryButton = new Button();
    deleteCategoryButton.setIcon(FontAwesome.MINUS_SQUARE);
    deleteCategoryButton.setImmediate(true);
    deleteCategoryButton.setWidth("-1px");
    deleteCategoryButton.setHeight("-1px");
    categoryButtonLayout.addComponent(deleteCategoryButton);
    
    return categoryButtonLayout;
  }

  @AutoGenerated
  private Panel buildRealUserPanel() {
    // common part: create layout
    realUserPanel = new Panel();
    realUserPanel.setCaption("Dostêpy");
    realUserPanel.setImmediate(false);
    realUserPanel.setWidth("100.0%");
    realUserPanel.setHeight("-1px");
    
    // realUserLayout
    realUserLayout = buildRealUserLayout();
    realUserPanel.setContent(realUserLayout);
    
    return realUserPanel;
  }

  @AutoGenerated
  private VerticalLayout buildRealUserLayout() {
    // common part: create layout
    realUserLayout = new VerticalLayout();
    realUserLayout.setImmediate(false);
    realUserLayout.setWidth("100.0%");
    realUserLayout.setHeight("-1px");
    realUserLayout.setMargin(true);
    
    // realUserGrid
    realUserGrid = new Grid();
    realUserGrid.setImmediate(false);
    realUserGrid.setWidth("100%");
    realUserGrid.setHeight("100%");
    realUserLayout.addComponent(realUserGrid);
    
    // realUserButtonLayout
    realUserButtonLayout = buildRealUserButtonLayout();
    realUserLayout.addComponent(realUserButtonLayout);
    
    return realUserLayout;
  }

  @AutoGenerated
  private HorizontalLayout buildRealUserButtonLayout() {
    // common part: create layout
    realUserButtonLayout = new HorizontalLayout();
    realUserButtonLayout.setImmediate(false);
    realUserButtonLayout.setWidth("-1px");
    realUserButtonLayout.setHeight("-1px");
    realUserButtonLayout.setMargin(true);
    realUserButtonLayout.setSpacing(true);
    
    // addRealUserButton
    addRealUserButton = new Button();
    addRealUserButton.setIcon(FontAwesome.PLUS_SQUARE);
    addRealUserButton.setImmediate(true);
    addRealUserButton.setWidth("-1px");
    addRealUserButton.setHeight("-1px");
    realUserButtonLayout.addComponent(addRealUserButton);
    
    // deleteRealUserButton
    deleteRealUserButton = new Button();
    deleteRealUserButton.setIcon(FontAwesome.MINUS_SQUARE);
    deleteRealUserButton.setImmediate(true);
    deleteRealUserButton.setWidth("-1px");
    deleteRealUserButton.setHeight("-1px");
    realUserButtonLayout.addComponent(deleteRealUserButton);
    
    return realUserButtonLayout;
  }

  @AutoGenerated
  private Panel buildUserPanel() {
    // common part: create layout
    userPanel = new Panel();
    userPanel.setCaption("Dodatkowi u¿ytkownicy");
    userPanel.setImmediate(false);
    userPanel.setWidth("100.0%");
    userPanel.setHeight("-1px");
    
    // userLayout
    userLayout = buildUserLayout();
    userPanel.setContent(userLayout);
    
    return userPanel;
  }

  @AutoGenerated
  private VerticalLayout buildUserLayout() {
    // common part: create layout
    userLayout = new VerticalLayout();
    userLayout.setImmediate(false);
    userLayout.setWidth("100.0%");
    userLayout.setHeight("-1px");
    userLayout.setMargin(true);
    
    // userGrid
    userGrid = new Grid();
    userGrid.setImmediate(false);
    userGrid.setWidth("100%");
    userGrid.setHeight("100%");
    userLayout.addComponent(userGrid);
    
    // userButtonLayout
    userButtonLayout = buildUserButtonLayout();
    userLayout.addComponent(userButtonLayout);
    
    return userLayout;
  }

  @AutoGenerated
  private HorizontalLayout buildUserButtonLayout() {
    // common part: create layout
    userButtonLayout = new HorizontalLayout();
    userButtonLayout.setImmediate(false);
    userButtonLayout.setWidth("-1px");
    userButtonLayout.setHeight("-1px");
    userButtonLayout.setMargin(true);
    userButtonLayout.setSpacing(true);
    
    // addUserButton
    addUserButton = new Button();
    addUserButton.setIcon(FontAwesome.PLUS_SQUARE);
    addUserButton.setImmediate(true);
    addUserButton.setWidth("-1px");
    addUserButton.setHeight("-1px");
    userButtonLayout.addComponent(addUserButton);
    
    // deleteUserButton
    deleteUserButton = new Button();
    deleteUserButton.setIcon(FontAwesome.MINUS_SQUARE);
    deleteUserButton.setImmediate(true);
    deleteUserButton.setWidth("-1px");
    deleteUserButton.setHeight("-1px");
    userButtonLayout.addComponent(deleteUserButton);
    
    return userButtonLayout;
  }

  @AutoGenerated
  private HorizontalLayout buildButtonLayout() {
    // common part: create layout
    buttonLayout = new HorizontalLayout();
    buttonLayout.setImmediate(false);
    buttonLayout.setWidth("-1px");
    buttonLayout.setHeight("-1px");
    buttonLayout.setMargin(true);
    buttonLayout.setSpacing(true);
    
    // addSheetButton
    addSheetButton = new Button();
    addSheetButton.setCaption("Dodaj nowy arkusz");
    addSheetButton.setIcon(FontAwesome.PLUS_SQUARE);
    addSheetButton.setImmediate(true);
    addSheetButton.setWidth("-1px");
    addSheetButton.setHeight("-1px");
    buttonLayout.addComponent(addSheetButton);
    
    // delSheetButton
    delSheetButton = new Button();
    delSheetButton.setCaption("Usuñ TEN arkusz");
    delSheetButton.setIcon(FontAwesome.MINUS_SQUARE);
    delSheetButton.setImmediate(true);
    delSheetButton.setWidth("-1px");
    delSheetButton.setHeight("-1px");
    buttonLayout.addComponent(delSheetButton);
    
    return buttonLayout;
  }

}
