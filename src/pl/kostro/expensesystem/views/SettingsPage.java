package pl.kostro.expensesystem.views;

import pl.kostro.expensesystem.model.ExpenseSheet;
import pl.kostro.expensesystem.model.RealUser;
import pl.kostro.expensesystem.views.settingsPage.ExpenseSheetSettingsView;
import pl.kostro.expensesystem.views.settingsPage.NewExpenseSheetView;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.MenuBar.MenuItem;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.MenuBar;
import com.vaadin.ui.VerticalLayout;

public class SettingsPage extends VerticalLayout implements View {

  private static final long serialVersionUID = 4095840075421339917L;

  private VerticalLayout mainView;
  private HorizontalLayout tabLayout;
  private Button addSheetButton;
  private MenuBar sheetMenu;

  RealUser loggedUser;

  public SettingsPage() {
    loggedUser = (RealUser) VaadinSession.getCurrent().getAttribute(RealUser.class.getName());
    
    setMargin(true);
    setSpacing(true);
    
    addComponent(buildTabLayout());
    addComponent(buildMainView());
  }

  private VerticalLayout buildMainView() {
    mainView = new VerticalLayout();
    mainView.setImmediate(false);
    mainView.setMargin(true);
    return mainView;
  }

  @AutoGenerated
  private HorizontalLayout buildTabLayout() {
    // common part: create layout
    tabLayout = new HorizontalLayout();
    tabLayout.setImmediate(false);
    tabLayout.setWidth("100%");
    tabLayout.setHeight("-1px");
    tabLayout.setMargin(false);
    tabLayout.setSpacing(true);

    // sheetMenu
    MenuBar.Command sheetCommand = new MenuBar.Command() {

      private static final long serialVersionUID = -5420888032285767247L;

      @Override
      public void menuSelected(MenuItem selectedItem) {
        for (ExpenseSheet expenseSheet : loggedUser.getExpenseSheetList()) {
          if (selectedItem.getText().equals(expenseSheet.getName())) {
            mainView.removeAllComponents();
            mainView.addComponent(new ExpenseSheetSettingsView(expenseSheet));
          }
        }
      }
    };
    
    sheetMenu = new MenuBar();
    sheetMenu.setImmediate(false);
    sheetMenu.setWidth("-1px");
    sheetMenu.setHeight("-1px");
    
    MenuItem sheets = sheetMenu.addItem("Arkusze", null);
    for (ExpenseSheet expenseSheet : loggedUser.getExpenseSheetList()) {
      sheets.addItem(expenseSheet.getName(), sheetCommand);
    }

    tabLayout.addComponent(sheetMenu);
    
    // addSheetButton
    addSheetButton = new Button();
    addSheetButton.setCaption("Dodaj arkusz");
    addSheetButton.setImmediate(false);
    addSheetButton.setWidth("-1px");
    addSheetButton.setHeight("-1px");
    addSheetButton.addClickListener(new Button.ClickListener() {

      private static final long serialVersionUID = -9202021732327761870L;

      @Override
      public void buttonClick(ClickEvent event) {
        mainView.removeAllComponents();
        mainView.addComponent(new NewExpenseSheetView(loggedUser));
      }
    });
    
    tabLayout.addComponent(addSheetButton);
    tabLayout.setComponentAlignment(addSheetButton, new Alignment(6));

    return tabLayout;
  }

  @Override
  public void enter(ViewChangeEvent event) {
    // TODO Auto-generated method stub

  }

}
