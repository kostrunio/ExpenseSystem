package pl.kostro.expensesystem.views.mainPage;

import java.util.Calendar;

import pl.kostro.expensesystem.Msg;
import pl.kostro.expensesystem.components.form.ExpenseForm;
import pl.kostro.expensesystem.model.Category;
import pl.kostro.expensesystem.model.Expense;
import pl.kostro.expensesystem.model.ExpenseSheet;
import pl.kostro.expensesystem.model.User;
import pl.kostro.expensesystem.model.UserLimit;
import pl.kostro.expensesystem.service.ExpenseService;
import pl.kostro.expensesystem.service.ExpenseSheetService;
import pl.kostro.expensesystem.service.UserSummaryService;
import pl.kostro.expensesystem.utils.Filter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.SelectionEvent;
import com.vaadin.event.SelectionEvent.SelectionListener;
import com.vaadin.server.VaadinSession;
import com.vaadin.shared.ui.combobox.FilteringMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Grid;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class FindExpenseView extends CustomComponent {

  /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

  @AutoGenerated
  private VerticalLayout mainLayout;
  @AutoGenerated
  private HorizontalLayout horizontalLayout_2;
  @AutoGenerated
  private ExpenseForm expenseForm;
  @AutoGenerated
  private Grid expenseGrid;
  @AutoGenerated
  private HorizontalLayout actionsLayout;
  @AutoGenerated
  private Button newExpenseButton;
  @AutoGenerated
  private Button filterButton;
  @AutoGenerated
  private ComboBox commentBox;
  @AutoGenerated
  private TextField formulaField;
  @AutoGenerated
  private ComboBox userBox;
  @AutoGenerated
  private ComboBox categoryBox;
  @AutoGenerated
  private PopupDateField toDateField;
  @AutoGenerated
  private PopupDateField fromDateField;
  
  private static final long serialVersionUID = -7426045263916627689L;
  
  private Calendar calendar;
  
  private ExpenseSheet expenseSheet;
  /**
   * The constructor should first build the main layout, set the
   * composition root and then do any custom initialization.
   *
   * The constructor will not be automatically regenerated by the
   * visual editor.
   */
  public FindExpenseView(Calendar date) {
    this.expenseSheet = VaadinSession.getCurrent().getAttribute(ExpenseSheet.class);
    this.calendar = date;
    buildMainLayout();
    setCompositionRoot(mainLayout);

    // TODO add user code here
    expenseForm.prepare(expenseSheet, this);
    
    fromDateField.setValue(UserSummaryService.getFirstDay(calendar.getTime()));
    toDateField.setValue(UserSummaryService.getLastDay(calendar.getTime()));
    categoryBox.addItems(expenseSheet.getCategoryList());
    userBox.addItems(expenseSheet.getUserLimitList());
    commentBox.setNewItemsAllowed(true);
    commentBox.setFilteringMode(FilteringMode.CONTAINS);
    commentBox.addItems(ExpenseSheetService.getAllComments(expenseSheet));
    expenseSheet.setFilter(new Filter(
        fromDateField.getValue(),
        toDateField.getValue(),
        (Category) categoryBox.getValue(),
        null,
        formulaField.getValue(),
        (String)commentBox.getValue()));
    
    filterButton.addClickListener(new ClickListener() {
      
      private static final long serialVersionUID = -3483592868382478228L;

      @Override
      public void buttonClick(ClickEvent event) {
        User filterUser = null;
        if (userBox.getValue() instanceof UserLimit) {
          filterUser = ((UserLimit) userBox.getValue()).getUser();
        }
        expenseSheet.setFilter(new Filter(
            fromDateField.getValue(),
            toDateField.getValue(),
            (Category) categoryBox.getValue(),
            filterUser,
            formulaField.getValue(),
            (String)commentBox.getValue()));
        refreshExpenses();
      }
    });
    
    newExpenseButton.addClickListener(new ClickListener() {
      
      private static final long serialVersionUID = -3483592868382478228L;

      @Override
      public void buttonClick(ClickEvent event) {
        expenseForm.edit(new Expense());
      }
    });
    
    expenseGrid.setContainerDataSource(new BeanItemContainer<Expense>(Expense.class));
    expenseGrid.setColumnOrder(new Object[]{"date", "category", "user", "formula", "value", "comment"});
    expenseGrid.getColumn("date").setHeaderCaption(Msg.get("findPage.date"));
    expenseGrid.getColumn("category").setHeaderCaption(Msg.get("findPage.category"));
    expenseGrid.getColumn("user").setHeaderCaption(Msg.get("findPage.user"));
    expenseGrid.getColumn("formula").setHeaderCaption(Msg.get("findPage.formula"));
    expenseGrid.getColumn("value").setHeaderCaption(Msg.get("findPage.value"));
    expenseGrid.getColumn("comment").setHeaderCaption(Msg.get("findPage.comment"));
    expenseGrid.removeColumn("expenseSheet");
    expenseGrid.removeColumn("id");
    expenseGrid.setSelectionMode(Grid.SelectionMode.SINGLE);
    expenseGrid.setImmediate(true);
    expenseGrid.addSelectionListener(new SelectionListener() {
      
      private static final long serialVersionUID = -1208315732962434122L;

      @Override
      public void select(SelectionEvent event) {
        expenseForm.edit((Expense)expenseGrid.getSelectedRow());
      }
    });
    refreshExpenses();
  }
  
  public void refreshExpenses() {
    expenseGrid.setContainerDataSource(new BeanItemContainer<Expense>(
            Expense.class, ExpenseService.findAllExpense(expenseSheet)));
    expenseGrid.recalculateColumnWidths();
    expenseForm.setVisible(false);
  }

  @AutoGenerated
  private VerticalLayout buildMainLayout() {
    // common part: create layout
    mainLayout = new VerticalLayout();
    mainLayout.setImmediate(false);
    mainLayout.setWidth("100%");
    mainLayout.setHeight("100%");
    mainLayout.setMargin(false);
    
    // top-level component properties
    setWidth("100.0%");
    setHeight("100.0%");
    
    // actionsLayout
    actionsLayout = buildActionsLayout();
    mainLayout.addComponent(actionsLayout);
    
    // horizontalLayout_2
    horizontalLayout_2 = buildHorizontalLayout_2();
    mainLayout.addComponent(horizontalLayout_2);
    
    return mainLayout;
  }

  @AutoGenerated
  private HorizontalLayout buildActionsLayout() {
    // common part: create layout
    actionsLayout = new HorizontalLayout();
    actionsLayout.setImmediate(false);
    actionsLayout.setWidth("100.0%");
    actionsLayout.setHeight("-1px");
    actionsLayout.setMargin(false);
    actionsLayout.setSpacing(true);
    
    // fromDateField
    fromDateField = new PopupDateField();
    fromDateField.setCaption(Msg.get("findPage.dateFrom"));
    fromDateField.setDateFormat("yyyy-MM-dd");
    fromDateField.setImmediate(false);
    fromDateField.setWidth("-1px");
    fromDateField.setHeight("-1px");
    actionsLayout.addComponent(fromDateField);
    
    // toDateField
    toDateField = new PopupDateField();
    toDateField.setCaption(Msg.get("findPage.dateTo"));
    toDateField.setDateFormat("yyyy-MM-dd");
    toDateField.setImmediate(false);
    toDateField.setWidth("-1px");
    toDateField.setHeight("-1px");
    actionsLayout.addComponent(toDateField);
    
    // categoryBox
    categoryBox = new ComboBox();
    categoryBox.setCaption(Msg.get("findPage.category"));
    categoryBox.setImmediate(false);
    categoryBox.setWidth("-1px");
    categoryBox.setHeight("-1px");
    actionsLayout.addComponent(categoryBox);
    
    // userBox
    userBox = new ComboBox();
    userBox.setCaption(Msg.get("findPage.user"));
    userBox.setImmediate(false);
    userBox.setWidth("-1px");
    userBox.setHeight("-1px");
    actionsLayout.addComponent(userBox);
    
    // formulaField
    formulaField = new TextField();
    formulaField.setCaption(Msg.get("findPage.formula"));
    formulaField.setImmediate(false);
    formulaField.setWidth("-1px");
    formulaField.setHeight("-1px");
    actionsLayout.addComponent(formulaField);
    
    // commentBox
    commentBox = new ComboBox();
    commentBox.setCaption(Msg.get("findPage.comment"));
    commentBox.setImmediate(false);
    commentBox.setWidth("-1px");
    commentBox.setHeight("-1px");
    actionsLayout.addComponent(commentBox);
    
    // filterButton
    filterButton = new Button();
    filterButton.setCaption(Msg.get("findPage.filter"));
    filterButton.setImmediate(true);
    filterButton.setWidth("-1px");
    filterButton.setHeight("-1px");
    actionsLayout.addComponent(filterButton);
    actionsLayout.setComponentAlignment(filterButton, new Alignment(9));
    
    // newExpenseButton
    newExpenseButton = new Button();
    newExpenseButton.setCaption(Msg.get("findPage.add"));
    newExpenseButton.setImmediate(true);
    newExpenseButton.setWidth("-1px");
    newExpenseButton.setHeight("-1px");
    actionsLayout.addComponent(newExpenseButton);
    actionsLayout.setComponentAlignment(newExpenseButton, new Alignment(10));
    
    return actionsLayout;
  }

  @AutoGenerated
  private HorizontalLayout buildHorizontalLayout_2() {
    // common part: create layout
    horizontalLayout_2 = new HorizontalLayout();
    horizontalLayout_2.setImmediate(false);
    horizontalLayout_2.setWidth("100.0%");
    horizontalLayout_2.setHeight("100.0%");
    horizontalLayout_2.setMargin(false);
    
    // expenseGrid
    expenseGrid = new Grid();
    expenseGrid.setImmediate(false);
    expenseGrid.setWidth("100.0%");
    expenseGrid.setHeight("100.0%");
    horizontalLayout_2.addComponent(expenseGrid);
    
    // expenseForm
    expenseForm = new ExpenseForm();
    expenseForm.setImmediate(false);
    expenseForm.setWidth("100.0%");
    expenseForm.setHeight("100.0%");
    horizontalLayout_2.addComponent(expenseForm);
    
    return horizontalLayout_2;
  }

}
